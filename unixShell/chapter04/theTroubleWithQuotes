#!/usr/bin/sh
T H E     T R O U B L E    W I T H    Q U O T E S
	. UNIX Shell Scripting makes use of three different types of quotes:
		1. Single quotes (apostrophes) - the ' character
		2. Double quotes (quotation marks) - the " character
		3. Back quotes - the ` character
	. As a shell programmer, sorting out the various nuances of using these different quote types will bring you hours of frustration and bug-chasing.


S I N G L E    Q U O T E S

	. If you recall from Chapter 2, there are many special characters used by the shell, such as $, [, *, and #
	. If text in a shell script is sorrounded by single quotes, then every character in that text is considered to be a normal, non-special character (except another quote, another single quote)
		. This includes spaces and even newline characters
	. For example, the shell command:
		echo 'The total is 
		nearly $750'
	will cause the following output to appear on the screen:
		The total is
		nearly $750
	
D O U B L E    Q U O T E S
	. Single quotes remove all of the shell's special-characters features. Sometimes this is excessive - we may prefer some of the special characters to work, specifically: 
		. $   (for variable substitution, e.g. $PATH)
		. ` (see the next section)
		. Also, we may want the use of certain constructs, like \" or \$
	. In these situations we can sorround the text with double quotes. Other characters are still treated as special
	. For example:
		echo "$LOGNAME made \$1000 in `date +%B`"
	produces:
		peter made $1000 in November
		
B A C K    Q U O T E S
	. Unlike single and double quotes, the back quotes have nothing to do with special characters
	. Any text enclosed in back quotes is treated as a UNIX command, and is executed in its own shell. Any output from the command is substituted into the script line, replacing the quoted text.
	. For example:
		list=`who | sort`
		echo $list
	  produces
	  	fred tty02 Aug 21 11:01 peter tty01 Aug 22 09:58 tony tty05 Aug 22 10:32
		# Any text that is generated from a command inside back quotes has all of the new lines removed or at least turned to spaces and all of the multiple spaces and multiple tabs are all resolved to a single space. You can think of this as a particular nuance or feature of output generated by commands inside back quotes.

		echo the date is `date +%m/%d/%y` today # the date is 03/02/2017 today
		echo the date is `date` today # the date is Wed Aug 22 16:38:42 EST 2001 today
		echo the date is `ls` today # the date is Chap02 Chap04 contacts logfiles myscript names.dat perl-script testmonth today
		myfiles=`ls`
		echo $myfiles
